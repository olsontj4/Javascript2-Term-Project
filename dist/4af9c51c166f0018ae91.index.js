(()=>{"use strict";var t,e={886:(t,e,n)=>{function i(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0,r=function(){};return{s:r,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){l=!0,s=t},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function s(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i.key),"symbol"===r(o)?o:String(o)),i)}var o}n(138);var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.uiCanvas=document.querySelector("canvas"),this.context=this.uiCanvas.getContext("2d"),this.marker=document.getElementById("marker"),this.mapImg=document.getElementById("mapImg"),this.uiSubmit=document.getElementById("formSubmit"),this.uiNext=document.getElementById("next"),this.uiReset=document.getElementById("reset"),this.uiSelect=document.querySelectorAll("select"),this.uiSpinner=document.getElementById("loading"),this.uiDescriptionBox=document.getElementById("descriptionBox"),this.uiSubmitMessage=document.getElementById("submitMessage"),this.url="https://api.genshin.dev",this.urlExtension="",this.holdData=null,this.holdDataBranch=null,this.holdJSON=null,this.nextIndex=0,this.getCoords=this.getCoords.bind(this),this.getCoords(),this.getDatabase=this.getDatabase.bind(this),this.getDatabase(0,""),document.getElementById("loadingMap").hidden=!0,this.uiCanvas.hidden=!1,this.drawCanvas(this.mapImg,4524,914),this.uiNext.disabled=!0,this.uiSubmit.hidden=!1,this.uiNext.hidden=!1,this.uiReset.hidden=!1,this.addEventHandlers()}var e,n;return e=t,(n=[{key:"addEventHandlers",value:function(){this.formSubmit=this.formSubmit.bind(this),this.findNext=this.findNext.bind(this),this.resetForm=this.resetForm.bind(this),this.uiSubmit.onclick=this.formSubmit,this.uiNext.onclick=this.findNext,this.uiReset.onclick=this.resetForm}},{key:"getDatabase",value:function(t,e){var n=this;if(this.uiSubmitMessage.innerHTML="&#8203",this.uiSpinner.classList.remove("d-none"),null!=this.holdData)if(null!=this.holdData[e]){if(this.holdDataBranch=this.holdData[e],"object"!=r(this.holdData[e])&&void 0!==this.holdData[e]){if(this.loadItemDescription(this.holdData[e]),document.getElementById("dropdownMenus").childElementCount>2*t)for(var i=document.getElementById("dropdownMenus").childElementCount-2*t;i>0;i--)document.getElementById("dropdownMenus").lastChild.remove()}else null!=this.uiSelect[t-2]&&(this.uiSelect[t-2].disabled=!0),this.uiNext.disabled=!0,this.loadUiInputs(t,this.holdData[e]);this.uiSpinner.classList.add("d-none")}else if(null!=this.holdDataBranch[e])"object"!=r(this.holdData[e])&&void 0!==this.holdData[e]?this.loadItemDescription(this.holdData[e]):"object"!=r(this.holdDataBranch[e])&&void 0!==this.holdDataBranch[e]?this.loadItemDescription(this.holdDataBranch[e]):(null!=this.uiSelect[t-2]&&(this.uiSelect[t-2].disabled=!0,this.holdData=this.holdDataBranch,this.holdDataBranch=this.holdDataBranch[e]),this.uiNext.disabled=!0,this.loadUiInputs(t,this.holdDataBranch)),this.uiSpinner.classList.add("d-none");else{if(""!=e){if((this.urlExtension.match(/\/[^ \/]+/g)||[]).length>=t)for(var o=(this.urlExtension.match(/\/[^ \/]+/g)||[]).length;o>t-1;o--){var s=this.urlExtension;s=s.replace(this.urlExtension.match(/\/[^ \/]+/g)[o-1].toString(),""),this.urlExtension=s}this.urlExtension+="/".concat(e)}null!=this.uiSelect[t-2]&&(this.uiSelect[t-2].disabled=!0),console.log("".concat(this.url).concat(this.urlExtension)),fetch("".concat(this.url).concat(this.urlExtension)).then((function(t){return t.json()})).then((function(e){null!=e.description?n.loadItemDescription(e.description):(n.holdData=e,n.holdDataBranch=e,n.uiNext.disabled=!0,n.loadUiInputs(t,e)),n.uiSpinner.classList.add("d-none")})).catch((function(t){return alert(t)}))}else{if(""!=e){if((this.urlExtension.match(/\/[^ \/]+/g)||[]).length>=t)for(var a=(this.urlExtension.match(/\/[^ \/]+/g)||[]).length;a>t-1;a--){var l=this.urlExtension;l=l.replace(this.urlExtension.match(/\/[^ \/]+/g)[a-1].toString(),""),this.urlExtension=l}this.urlExtension+="/".concat(e)}null!=this.uiSelect[t-2]&&(this.uiSelect[t-2].disabled=!0),console.log("".concat(this.url).concat(this.urlExtension)),fetch("".concat(this.url).concat(this.urlExtension)).then((function(t){return t.json()})).then((function(e){null!=e.description?n.loadItemDescription(e.description):(n.holdData=e,n.holdDataBranch=e,n.uiNext.disabled=!0,n.loadUiInputs(t,e)),n.uiSpinner.classList.add("d-none")})).catch((function(t){return alert(t)}))}}},{key:"getCoords",value:function(){var t=this;fetch("./assets/data/mapCoords.json").then((function(t){return t.json()})).then((function(e){t.holdJSON=e})).catch((function(t){return alert(t)}))}},{key:"getImage",value:function(t){document.getElementById("preview").src=t}},{key:"loadItemDescription",value:function(t){null!=this.uiDescriptionBox.firstElementChild&&this.uiDescriptionBox.firstElementChild.remove();var e=document.createElement("p");e.id="description",e.innerHTML=t,this.uiDescriptionBox.appendChild(e)}},{key:"loadUiInputs",value:function(t,e){var n=this;null!=this.uiDescriptionBox.firstElementChild&&this.uiDescriptionBox.firstElementChild.remove();var o=t;if(document.getElementById("dropdownMenus").childElementCount>2*o)for(var r=document.getElementById("dropdownMenus").childElementCount-2*o;r>0;r--)document.getElementById("dropdownMenus").lastChild.remove();var s=document.createElement("select");s.id="input".concat(o),s.classList.add("form-select"),document.querySelector("#dropdownMenus").appendChild(s),document.querySelector("#dropdownMenus").appendChild(document.createElement("br"));var a=document.createElement("option");if(a.disabled=!0,a.hidden=!0,a.selected=!0,a.innerHTML="Select one...",document.getElementById("input".concat(o)).appendChild(a),0==o){var l,h=i(e.types);try{for(h.s();!(l=h.n()).done;){var d=l.value,u=document.createElement("option");u.value=d,u.innerHTML=d,document.getElementById("input".concat(o)).appendChild(u),document.getElementById("input".concat(o)).onchange=function(){n.getDatabase(o+1,document.getElementById("input".concat(o)).value)}}}catch(t){h.e(t)}finally{h.f()}}else if(1==o){var c,m=i(e);try{for(m.s();!(c=m.n()).done;){var f=c.value,p=document.createElement("option");p.value=f,p.innerHTML=f,document.getElementById("input".concat(o)).appendChild(p),document.getElementById("input".concat(o)).onchange=function(){n.getDatabase(o+1,document.getElementById("input".concat(o)).value)}}}catch(t){m.e(t)}finally{m.f()}}else for(var v in e){var y=document.createElement("option");y.value=v,y.innerHTML=v,document.getElementById("input".concat(o)).appendChild(y),document.getElementById("input".concat(o)).onchange=function(){n.getDatabase(o+1,document.getElementById("input".concat(o)).value)}}this.uiSelect=document.querySelectorAll("select")}},{key:"formSubmit",value:function(t){t.preventDefault(),this.nextIndex=0;var e=document.getElementById("input0");if(0==e.selectedIndex)this.uiSubmitMessage.innerHTML="No item selected.";else if(["characters","elements","enemies"].includes(e.value)){var n="".concat(e.value," are not items, and do not have a location on this map.");this.uiSubmitMessage.innerHTML=n}else{var i=this.searchCoords(0);null==i?(this.uiSubmitMessage.innerHTML="Not found.",this.drawCanvas(this.mapImg,4524,914)):(this.drawCanvas(this.mapImg,i[0],i[1]),null==i[2]&&this.drawMarker(),this.uiSubmitMessage.innerHTML="&#8203",this.uiNext.disabled=!1)}}},{key:"findNext",value:function(t){t.preventDefault(),this.nextIndex++;var e=this.searchCoords(this.nextIndex);null==e?(this.uiSubmitMessage.innerHTML="Not found.",this.uiNext.disabled=!0):(this.drawCanvas(this.mapImg,e[0],e[1]),null==e[2]&&this.drawMarker())}},{key:"searchCoords",value:function(t){if(t>0){var e=[];if(null!=this.holdDataBranch.source)for(var n in this.holdJSON)this.holdDataBranch.source!=n&&this.holdDataBranch.source!=this.holdJSON[n].name||e.push(this.holdJSON[n].coords);else if(null!=this.holdDataBranch.sources)for(var o in this.holdJSON)this.holdDataBranch.sources[t]!=o&&this.holdDataBranch.sources[t]!=this.holdJSON[o].name||e.push(this.holdJSON[o].coords);else if(null!=this.holdData.source)for(var r in this.holdJSON)this.holdData.source!=r&&this.holdData.source!=this.holdJSON[r].name||e.push(this.holdJSON[r].coords);else if(null!=this.holdData.sources)for(var s in this.holdJSON)this.holdData.sources[t]!=s&&this.holdData.sources[t]!=this.holdJSON[s].name||e.push(this.holdJSON[s].coords);else for(var a=1;2*a<document.getElementById("dropdownMenus").childElementCount;a++)for(var l in this.holdJSON)if(document.getElementById("input".concat(a)).value==l)e.push(this.holdJSON[l].coords);else for(var h in this.holdJSON[l]){var d,u=i(this.holdJSON[l][h]);try{for(u.s();!(d=u.n()).done;){var c=d.value;document.getElementById("input".concat(a)).value==c&&e.push(this.holdJSON[l].coords)}}catch(t){u.e(t)}finally{u.f()}}return e[t]}if(null!=this.holdDataBranch.source){for(var m in this.holdJSON)if(this.holdDataBranch.source==m||this.holdDataBranch.source==this.holdJSON[m].name)return this.holdJSON[m].coords}else if(null!=this.holdDataBranch.sources){for(var f in this.holdJSON)if(this.holdDataBranch.sources[0]==f||this.holdDataBranch.sources[0]==this.holdJSON[f].name)return this.holdJSON[f].coords}else if(null!=this.holdData.source){for(var p in this.holdJSON)if(this.holdData.source==p||this.holdData.source==this.holdJSON[p].name)return this.holdJSON[p].coords}else if(null!=this.holdData.sources){for(var v in this.holdJSON)if(this.holdData.sources[0]==v||this.holdData.sources[0]==this.holdJSON[v].name)return this.holdJSON[v].coords}else for(var y=1;2*y<document.getElementById("dropdownMenus").childElementCount;y++)for(var g in this.holdJSON){if(document.getElementById("input".concat(y)).value==g)return this.holdJSON[g].coords;for(var S in this.holdJSON[g]){var b,E=i(this.holdJSON[g][S]);try{for(E.s();!(b=E.n()).done;){var D=b.value;if(document.getElementById("input".concat(y)).value==D)return this.holdJSON[g].coords}}catch(t){E.e(t)}finally{E.f()}}}return null}},{key:"drawCanvas",value:function(t,e,n){this.context.drawImage(t,250-e,250-n)}},{key:"drawMarker",value:function(){this.context.drawImage(this.marker,225,150)}},{key:"resetForm",value:function(t){t.preventDefault(),document.querySelector("#dropdownMenus").innerHTML="",this.urlExtension="",this.nextIndex=0,this.uiNext.disabled=!0,this.getDatabase(0,""),this.drawCanvas(this.mapImg,4524,914)}}])&&s(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();window.onload=function(){new a}}},n={};function i(t){var o=n[t];if(void 0!==o)return o.exports;var r=n[t]={exports:{}};return e[t](r,r.exports,i),r.exports}i.m=e,t=[],i.O=(e,n,o,r)=>{if(!n){var s=1/0;for(d=0;d<t.length;d++){for(var[n,o,r]=t[d],a=!0,l=0;l<n.length;l++)(!1&r||s>=r)&&Object.keys(i.O).every((t=>i.O[t](n[l])))?n.splice(l--,1):(a=!1,r<s&&(s=r));if(a){t.splice(d--,1);var h=o();void 0!==h&&(e=h)}}return e}r=r||0;for(var d=t.length;d>0&&t[d-1][2]>r;d--)t[d]=t[d-1];t[d]=[n,o,r]},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={826:0};i.O.j=e=>0===t[e];var e=(e,n)=>{var o,r,[s,a,l]=n,h=0;if(s.some((e=>0!==t[e]))){for(o in a)i.o(a,o)&&(i.m[o]=a[o]);if(l)var d=l(i)}for(e&&e(n);h<s.length;h++)r=s[h],i.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return i.O(d)},n=self.webpackChunkitem_finder=self.webpackChunkitem_finder||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var o=i.O(void 0,[994],(()=>i(886)));o=i.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,